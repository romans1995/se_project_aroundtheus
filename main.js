(()=>{"use strict";var e={};function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.p="";const r=function(){function e(n,r){var o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._inputSelector=n.inputSelector,this._submitButtonSelector=n.submitButtonSelector,this._inactiveButtonClass=n.inactiveButtonClass,this._inputErrorClass=n.inputErrorClass,this._errorClass=n.errorClass,this._form=r,this._inputs=function(e){if(Array.isArray(e))return t(e)}(o=this._form.querySelectorAll(this._inputSelector))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this._button=this._form.querySelector(this._submitButtonSelector)}var r,o;return r=e,(o=[{key:"_hideInputError",value:function(e){var t=this._form.querySelector("#"+e.id+"-error");t.textContent="",t.classList.remove(this._errorClass)}},{key:"_showInputError",value:function(e){var t=this._form.querySelector("#"+e.id+"-error");t.textContent=e.validationMessage,t.classList.add(this._errorClass)}},{key:"_checkInputValidity",value:function(e){e.checkValidity()?this._hideInputError(e):this._showInputError(e,this._form)}},{key:"isFormValid",value:function(){return this._inputs.every((function(e){return!0===e.validity.valid}))}},{key:"toggleButton",value:function(){this.isFormValid()?this._button.removeAttribute("disabled"):this._button.disabled=!0}},{key:"_setEventListeners",value:function(){var e=this;this.toggleButton(this._inputs),this._inputs.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e.toggleButton(t)}))}))}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners(this._form)}}])&&n(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n,r){var o=r.handleClickCard,i=r.handleDeleteCard,u=r.handleLike,a=r.userId;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._element=t,this._name=t.name,this._link=t.link,this._likes=t.likes?t.likes:[],this._cardSelector=n,this._handleClickCard=o,this._handleDeleteCard=i,this._cardId=t._id,this._userId=a,this._ownerId=t.owner?t.owner:t,this._handleLike=u}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"_seteventListeners",value:function(){var e=this;this._elementImage.addEventListener("click",(function(){e._handleClickCard(e._link,e._name)})),this._likeBtn.addEventListener("click",(function(){e._handleLike(e._cardId)})),this._deleteBtn.addEventListener("click",(function(){e._handleDeleteCard(e._cardId)}))}},{key:"likeCards",value:function(e){this._likes=e,this._element.querySelector(".element__like-button").classList.toggle("element__like-button_active"),this._element.querySelector(".element__likes-count").textContent=this._likes.length}},{key:"handleElmentRemove",value:function(){this._element.remove(),this._element=null}},{key:"isLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}},{key:"addElment",value:function(){return this._element=this._getTemplate(),this._elementImage=this._element.querySelector(".element__image"),this._likeBtn=this._element.querySelector(".element__like-button"),this._deleteBtn=this._element.querySelector(".element__delete-button"),this._title=this._element.querySelector(".element__title").textContent=this._name,this._elementImage.alt=this._name,this._elementImage.src=this._link,this._likeCount=this._element.querySelector(".element__likes-count"),this._likeCount.textContent=this._likes?this._likes.length:0,this._ownerId._id!==this._userId&&(this._deleteBtn.style.display="none"),this.isLiked()&&this.likeCards(this._likes),this._seteventListeners(),this._element}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();const u=i;function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const c=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._container=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var f=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),s(this,"_closePopupOnRemoteClick",(function(e){e.target.classList.contains("popup")&&n.close()})),this._popupElement=document.querySelector(t),this.close=this.close.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("popup_active"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._closePopupOnRemoteClick)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_active"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._closePopupOnRemoteClick)}},{key:"setEventListener",value:function(){var e=this;this._popupElement.addEventListener("click",(function(t){t.target.classList.contains("popup__close-btn")&&e.close()}))}}])&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function p(e){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p(e)}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return d=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},d(e,t)}function y(e,t){if(t&&("object"===p(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _(e)}function _(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function m(){return m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=b(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},m.apply(this,arguments)}function b(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=v(e)););return e}function v(e){return v=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},v(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=v(r);if(o){var n=v(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return y(this,e)});function u(e,t){var n,r,o,a,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),c=function(){m((n=_(r),v(u.prototype)),"close",n).call(n),r._form.reset()},(a="close")in(o=_(r=i.call(this,e)))?Object.defineProperty(o,a,{value:c,enumerable:!0,configurable:!0,writable:!0}):o[a]=c,r._form=r._popupElement.querySelector(".popup__inputs-container"),r.submitHandler=t,r.formSelector=e,r.formInputValues={},r._inputList=r._popupElement.querySelectorAll(".popup__input"),r._buttonSubmit=r._form.querySelector(".popup__submit-button"),r._buttonSubmitText=r._buttonSubmit.textContent,r}return t=u,n=[{key:"_getInputValues",value:function(){var e=this;return this._inputList.forEach((function(t){e.formInputValues[t.name]=t.value})),this.formInputValues}},{key:"loadingRender",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"saving...";this._buttonSubmit.textContent=e?t:this._buttonSubmitText}},{key:"setEventListeners",value:function(){var e=this;this._form.addEventListener("submit",(function(t){t.preventDefault();var n=e._getInputValues();e.submitHandler(n)})),m(v(u.prototype),"setEventListener",this).call(this)}},{key:"setInputValues",value:function(e){this._inputList.forEach((function(t){t.value=e[t.name]}))}}],n&&h(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(f);function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(){return S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=E(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},S.apply(this,arguments)}function E(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=j(e)););return e}function O(e,t){return O=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},O(e,t)}function C(e,t){if(t&&("object"===k(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function j(e){return j=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},j(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&O(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=j(r);if(o){var n=j(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return C(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e)).imageElment=t._popupElement.querySelector(".popup__image"),t._imageCaption=t._popupElement.querySelector(".popup__caption"),t}return t=u,(n=[{key:"open",value:function(e,t){this.imageElment.src=e,this._imageCaption.textContent=t,this.imageElment.alt="a nice view of a ".concat(t),S(j(u.prototype),"open",this).call(this)}}])&&w(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(f);function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=document.querySelector(t),this._userJob=document.querySelector(n),this._userAvatr=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,title:this._userJob.textContent}}},{key:"setUserInfo",value:function(e,t){this._userName.textContent=e,this._userJob.textContent=t}},{key:"setUserAvatar",value:function(e){this._userAvatr.src=e}}])&&I(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();const R=e.p+"c75819857ff1599f0c50.svg",q=e.p+"5fa4ff08da722d75cea6.jpg";var T=document.querySelector(".popup__inputs-type-name"),A=document.querySelector(".popup__inputs-type-description"),U=document.querySelector(".popup__inputs-container"),B=document.querySelector(".popup__inputs-container-addPlace"),x=document.querySelector(".popup__inputs-edit-avatar"),D=document.querySelector(".profile__edit"),V=document.querySelector(".profile__add"),F=document.querySelector(".elements").querySelector(".elements__list"),N=document.querySelector(".profile__img-container"),H=document.querySelector(".header__logo"),J=document.querySelector(".profile__img"),M={inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input-error",errorClass:"popup__error_visible"};function $(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var z=new(function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_customFetch",value:function(e,t){return fetch(e,t).then((function(e){return e.ok?e.json():Promise.reject(e.statusText)}))}},{key:"getInitalCards",value:function(){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers})}},{key:"setUserInfo",value:function(e,t){return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,about:t})})}},{key:"getUserInformation",value:function(){return this._customFetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}},{key:"createCard",value:function(e){return this._customFetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)})}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"})}},{key:"likeCard",value:function(e){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"})}},{key:"dislikeCard",value:function(e){return this._customFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"})}},{key:"setAvatarImage",value:function(e){return this._customFetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})})}}])&&$(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}())({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"bc512917-6cb4-408b-9fef-08d285de7af3","Content-Type":"application/json"}});function G(e){return G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},G(e)}function K(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Q(){return Q="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=W(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},Q.apply(this,arguments)}function W(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Z(e)););return e}function X(e,t){return X=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},X(e,t)}function Y(e,t){if(t&&("object"===G(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function Z(e){return Z=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Z(e)}var ee,te=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&X(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Z(r);if(o){var n=Z(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Y(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._form=t._popupElement.querySelector(".popup__inputs-container"),t}return t=u,(n=[{key:"setAction",value:function(e){this._submitHandler=e}},{key:"setEventListeners",value:function(){var e=this;this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler()})),Q(Z(u.prototype),"setEventListener",this).call(this)}}])&&K(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(f);function ne(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}Promise.all([z.getInitalCards(),z.getUserInformation()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],u=!0,a=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){a=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(a)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return ne(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ne(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];ee=i._id,he.renderItems(o),re.setUserInfo(i.name,i.about),re.setUserAvatar(i.avatar)})),H.src=R,J.src=q;var re=new L(".profile__description-name",".profile__description-prof",".profile__img"),oe=new r(M,U),ie=new r(M,B),ue=new r(M,x),ae=new g(".profile-popup",(function(e){ae.loadingRender(!0,"Saving..."),re.setUserInfo(e.name,e.job),z.setUserInfo(e.name,e.job).catch((function(e){return console.log(e)})).finally((function(){return ae.loadingRender(!1)}))}));ae.setEventListeners();var ce=new P(".popup_image-prev");ce.setEventListener();var le=new te(".popup-deleteCard");le.setEventListeners();var se=new g(".popup-editAvatar",(function(e){se.loadingRender(!0,"Saving..."),z.setAvatarImage(e.link).then((function(e){re.setUserAvatar(e.avatar)})).finally((function(){return se.loadingRender(!1)}))})),fe=new g(".popup-addElement",(function(e){fe.loadingRender(!0,"Saving..."),z.createCard(e).then((function(e){he.addItem(pe(e))})).finally((function(){return fe.loadingRender(!1)}))}));fe.setEventListeners(),se.setEventListeners(),oe.enableValidation(),ie.enableValidation(),ue.enableValidation();var pe=function(e){var t=new u(e,".element-Stracture",{userId:ee,handleClickCard:function(){ce.open(e.link,e.name)},handleLike:function(e){t.isLiked()?z.dislikeCard(e).then((function(e){return t.likeCards(e.likes)})):z.likeCard(e).then((function(e){console.log(e),t.likeCards(e.likes)}))},handleDeleteCard:function(e){le.open(),le.setAction((function(){z.deleteCard(e).then((function(e){t.handleElmentRemove(),le.close()}))}))}});return t.addElment()};D.addEventListener("click",(function(){ae.open();var e=re.getUserInfo();T.value=e.name,A.value=e.title})),V.addEventListener("click",(function(){fe.open(),ie.toggleButton()})),N.addEventListener("click",(function(){se.open(),ie.toggleButton()}));var he=new c({renderer:function(e){var t=pe(e);he.addItem(t)}},F)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,