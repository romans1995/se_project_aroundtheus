(()=>{"use strict";var e={};function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.p="";const r=function(){function e(n,r){var o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._inputSelector=n.inputSelector,this._submitButtonSelector=n.submitButtonSelector,this._inactiveButtonClass=n.inactiveButtonClass,this._inputErrorClass=n.inputErrorClass,this._errorClass=n.errorClass,this._form=r,this._inputs=function(e){if(Array.isArray(e))return t(e)}(o=this._form.querySelectorAll(this._inputSelector))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this._button=this._form.querySelector(this._submitButtonSelector)}var r,o;return r=e,(o=[{key:"_hideInputError",value:function(e){var t=this._form.querySelector("#"+e.id+"-error");t.textContent="",t.classList.remove(this._errorClass)}},{key:"_showInputError",value:function(e){var t=this._form.querySelector("#"+e.id+"-error");t.textContent=e.validationMessage,t.classList.add(this._errorClass)}},{key:"_checkInputValidity",value:function(e){e.checkValidity()?this._hideInputError(e):this._showInputError(e,this._form)}},{key:"isFormValid",value:function(){return this._inputs.every((function(e){return!0===e.validity.valid}))}},{key:"toggleButton",value:function(){this.isFormValid()?this._button.removeAttribute("disabled"):this._button.disabled=!0}},{key:"_setEventListeners",value:function(){var e=this;this.toggleButton(this._inputs),this._inputs.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e.toggleButton(t)}))}))}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners(this._form)}}])&&n(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const i=function(){function e(t,n,r){var o=r.handleClickCard;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._element=t,this._name=t.name,this._link=t.link,this._cardSelector=n,this._handleClickCard=o}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"_seteventListeners",value:function(){var e=this;this._elementImage.addEventListener("click",(function(){e._handleClickCard(e._link,e._name)})),this._likeBtn.addEventListener("click",(function(t){e._toggleLike(t)})),this._deleteBtn.addEventListener("click",(function(t){e._handleElmentRemove(t)}))}},{key:"_toggleLike",value:function(e){e.target.classList.toggle("element__like-button_active")}},{key:"_handleElmentRemove",value:function(){this._element.remove()}},{key:"addElment",value:function(){return this._element=this._getTemplate(),this._elementImage=this._element.querySelector(".element__image"),this._likeBtn=this._element.querySelector(".element__like-button"),this._deleteBtn=this._element.querySelector(".element__delete-button"),this._title=this._element.querySelector(".element__title").textContent=this._name,this._elementImage.alt=this._name,this._elementImage.src=this._link,this._seteventListeners(),this._element}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const c=function(){function e(t,n){var r=t.renderer,o=t.items;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=o,this._renderer=r,this._container=n}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),l(this,"_handleEscClose",(function(e){"Escape"===e.key&&n.close()})),l(this,"_closePopupOnRemoteClick",(function(e){e.target.classList.contains("popup")&&n.close()})),this._popupElement=document.querySelector(t),this.close=this.close.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("popup_active"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._closePopupOnRemoteClick)}},{key:"close",value:function(){this._popupElement.classList.remove("popup_active"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._closePopupOnRemoteClick)}},{key:"setEventListener",value:function(){var e=this;this._popupElement.addEventListener("click",(function(t){t.target.classList.contains("popup__close-btn")&&e.close()}))}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function p(e){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t){return y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},y(e,t)}function h(e,t){if(t&&("object"===p(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return m(e)}function m(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(){return d="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=_(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},d.apply(this,arguments)}function _(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=v(e)););return e}function v(e){return v=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},v(e)}var b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&y(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=v(r);if(o){var n=v(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return h(this,e)});function u(e,t){var n,r,o,c,a;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a=function(){d((n=m(r),v(u.prototype)),"close",n).call(n),r._form.reset()},(c="close")in(o=m(r=i.call(this,e)))?Object.defineProperty(o,c,{value:a,enumerable:!0,configurable:!0,writable:!0}):o[c]=a,r._form=r._popupElement.querySelector(".popup__inputs-container"),r.submitHandler=t,r.formSelector=e,r.formInputValues={},r._inputList=r._popupElement.querySelectorAll(".popup__input"),r}return t=u,(n=[{key:"_getInputValues",value:function(){var e=this;return this._inputList.forEach((function(t){e.formInputValues[t.name]=t.value})),this.formInputValues}},{key:"setEventListeners",value:function(){var e=this;this._form.addEventListener("submit",(function(t){t.preventDefault();var n=e._getInputValues();e.submitHandler(n),e.close()})),d(v(u.prototype),"setEventListener",this).call(this)}},{key:"setInputValues",value:function(e){this._inputList.forEach((function(t){t.value=e[t.name]}))}}])&&f(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(s);function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(){return E="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=k(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},E.apply(this,arguments)}function k(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=j(e)););return e}function S(e,t){return S=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},S(e,t)}function O(e,t){if(t&&("object"===g(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function j(e){return j=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},j(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&S(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=j(r);if(o){var n=j(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return O(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e)).imageElment=t._popupElement.querySelector(".popup__image"),t._imageCaption=t._popupElement.querySelector(".popup__caption"),t}return t=u,(n=[{key:"open",value:function(e,t){this.imageElment.src=e,this._imageCaption.textContent=t,this.imageElment.alt="a nice view of a ".concat(t),E(j(u.prototype),"open",this).call(this)}}])&&w(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(s);function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=document.querySelector(t),this._userJob=document.querySelector(n)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,title:this._userJob.textContent}}},{key:"setUserInfo",value:function(e,t){this._userName.textContent=e,this._userJob.textContent=t}}])&&P(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();const I=e.p+"c75819857ff1599f0c50.svg",q=e.p+"5fa4ff08da722d75cea6.jpg";var R=fetch("https://around.nomoreparties.co/v1/cohort-3-en/cards",{headers:{authorization:"bc512917-6cb4-408b-9fef-08d285de7af3","content-Type":"application/json"}}).then((function(e){return e.json()})).then((function(e){return console.log(e)})),B=document.querySelector(".popup__inputs-type-name"),T=document.querySelector(".popup__inputs-type-description"),V=document.querySelector(".popup__inputs-container"),x=document.querySelector(".popup__inputs-container-addPlace"),A=document.querySelector(".profile__edit"),D=document.querySelector(".profile__add"),N=document.querySelector(".elements").querySelector(".elements__list"),U=document.querySelector(".header__logo"),J=document.querySelector(".profile__img"),F={inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input-error",errorClass:"popup__error_visible"};U.src=I,J.src=q,console.log(R);var H=new L(".profile__description-name",".profile__description-prof"),M=new r(F,V),z=new r(F,x),$=new b(".profile-popup",(function(e){H.setUserInfo(e.name,e.job)}));$.setEventListeners();var G=new C(".popup_image-prev");G.setEventListener();var K=new b(".popup-addElement",(function(e){var t={name:"".concat(e.placeName),link:"".concat(e.placeLink)};W.addItem(Q(t))}));K.setEventListeners(),M.enableValidation(),z.enableValidation();var Q=function(e){return new i(e,".element-Stracture",{handleClickCard:function(){G.open(e.link,e.name)}}).addElment()};A.addEventListener("click",(function(){$.open();var e=H.getUserInfo();B.value=e.name,T.value=e.title})),D.addEventListener("click",(function(){K.open(),z.toggleButton()}));var W=new c({renderer:function(e){var t=Q(e);W.addItem(t)},items:R},N);W.renderItems()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,